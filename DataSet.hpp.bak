
#ifndef CONFIGURATION_DataNetwork_hpp
#define CONFIGURATION_DataNetwork_hpp

	#include "ame_Enviroment.hpp"

	#if defined(DISABLE_DataNetwork)
		#define DataNetwork_hpp

		#define IMPLEMENTATION_DataNetwork
		#define IMPLEMENTING_DataNetwork
	#else
		#if defined(DISABLE_IMPLEMENTATION_DataNetwork)
			#define IMPLEMENTATION_DataNetwork
			#define IMPLEMENTING_DataNetwork
		#endif
	#endif
#endif

#ifndef DataNetwork_hpp
#define DataNetwork_hpp
#define DataNetwork_AVAILABLE

#ifndef DISABLE_IMPLEMENTATION_DataNetwork
	#define IMPLEMENTATION_DataNetwork IMPLEMENTATION(public DataNetwork)
	#define IMPLEMENTING_DataNetwork IMPLEMENTING(public DataNetwork)
#endif

#ifndef ame_Enviroment_Defined

#endif

#ifdef ame_Windows
	#include "Printable.hpp"
#endif

#ifdef ame_ArduinoIDE
	#include "Arduino.h"
	#include "Printable.h"
#endif

#include "cppObjectClass.hpp"
#include "Class.hpp"
#include "LinkedList.hpp"

namespace ame{
	
template <class T>
class DataNetwork : public LinkedList<DataNetwork<T>>{
public:
	DataNetwork(){}
	virtual ~DataNetwork(){}
	
	virtual void setData(T* a_value){
		m_value = a_value;
	}
	
	virtual T* getData(){
		return m_value;
	}
	
	virtual void set(T a_value){
		if(m_value == nullptr){
			m_value = new T();
		}
		*m_value = a_value;
	}
	
	virtual T get(){
		if(m_value == nullptr){
			return T();
		}
		return *m_value;
	}

	//cppObject part
	virtual bool instanceof(cppObjectClass* cls){
		return LinkedList<DataNetwork<T>>::instanceof(cls) || 
				cls == Class<DataNetwork<T>>::getClass();
	}
	virtual cppObjectClass* getClass(){return Class<DataNetwork<T>>::getClass();}
	
	virtual DataNetwork<T>* clone(){
		return new DataNetwork<T>();
	}
protected:
	T* m_value = nullptr;
};

}

#endif